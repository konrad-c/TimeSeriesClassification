# range over shapelet length
for l_i in range(0, l_vals.shape[0]):
    l = l_vals[l_i]
    i = np.random.randint(0,n)      # random row in data
    j = np.random.randint(0,m-l+1)  # random start time
    subsequences_raw[l_i] = np.array([i,j,l])  # add shapelet parameters to subsequences
subsequences_raw = np.array(subsequences_raw)
######## Prune Raw Shapelets ########
d_matrix = np.zeros((r, pd.unique(Y).shape[0]))
if reduced:
    subseq_vals = np.array([''.join(ch for ch, _ in itertools.groupby(T_sax[i][j:j+l])) for i,j,l in subsequences_raw])
    t_len = np.vectorize(len)
    T_sax = np.array([''.join(ch for ch, _ in itertools.groupby(s)) for s in T_sax])
    mask = np.where((t_len(subseq_vals) > 1) + (t_len(subseq_vals) <= np.min(t_len(T_sax)))) 
    subseq_vals = subseq_vals[mask]
    subsequences_raw = subsequences_raw[mask]
    subseq_vals = pd.unique(subseq_vals)
else:
    subseq_vals = [T_sax[i][j:j+l] for i,j,l in subsequences_raw]
    
for t in range(0, pd.unique(Y).shape[0]):
    target = pd.unique(Y)[t]
    T_sax_target = np.array(T_sax[np.where(Y == target)])
    for s in range(0, len(subseq_vals)):
        rmotif = subseq_vals[s]#T_sax[i][j:j+l]
        d_matrix[s,t] = np.sum(np.array([minDistSAX(rmotif, w, sax_model) for w in T_sax_target]))
gap = np.abs(d_matrix[:,0] - d_matrix[:,1])
subsequences_pruned = subsequences_raw[np.argpartition(-gap, p)[:p]]