setwd("E:/Documents/Uni/TimeSeriesClassification/Python/Results")
library(ggplot2)
library(reshape2)
library(gridExtra)
cdata <- read.csv("Cricket/Lengths.csv")
cdata$Dataset <- "Cricket"
gdata <- read.csv("Gestures/Lengths.csv")
gdata$Dataset <- "Gestures"
wdata <- read.csv("Wafer/Lengths.csv")
wdata$Dataset <- "Wafer"
ldata <- rbind(cdata,gdata,wdata)
ggplot(cdata, aes(x=Dataset, y=Length, fill=Dataset)) +
geom_boxplot()
cdata <- read.csv("Cricket/Lengths.csv")
gdata <- read.csv("Gestures/Lengths.csv")
wdata <- read.csv("Wafer/Lengths.csv")
ggplot(cdata, aes(x=Dataset, y=Length, fill=Dataset)) +
geom_boxplot()
ggplot(cdata, aes(y=Length)) +
geom_boxplot()
cdata$Dataset <- "Cricket"
gdata$Dataset <- "Gestures"
wdata$Dataset <- "Wafer"
ggplot(cdata, aes(x=Dataset,y=Length)) +
geom_boxplot()
ggplot(cdata, aes(x=Dataset,y=Length)) +
geom_boxplot() +
theme_bw()
cgraph <- ggplot(cdata, aes(x=Dataset,y=Length)) +
geom_boxplot() +
theme_bw()
ggraph <- ggplot(gdata, aes(x=Dataset,y=Length)) +
geom_boxplot() +
theme_bw()
wgraph <- ggplot(wdata, aes(x=Dataset,y=Length)) +
geom_boxplot() +
theme_bw()
grid.arrange(cgraph, ggraph, wgraph)
grid.arrange(cgraph, ggraph, wgraph, ncol=3)
cgraph <- ggplot(cdata, aes(x=Dataset,y=Length)) +
geom_boxplot() +
theme_bw()+
labs(x="")
ggraph <- ggplot(gdata, aes(x=Dataset,y=Length)) +
geom_boxplot() +
theme_bw()+
labs(y="")
wgraph <- ggplot(wdata, aes(x=Dataset,y=Length)) +
geom_boxplot() +
theme_bw()+
labs(x="",y="")
grid.arrange(cgraph, ggraph, wgraph, ncol=3)
wgraph <- ggplot(wdata, aes(x=Dataset,y=Lengt, fill=Dataseth)) +
geom_boxplot() +
theme_bw()+
labs(x="",y="")
cgraph <- ggplot(cdata, aes(x=Dataset,y=Length, fill=Dataset)) +
geom_boxplot() +
theme_bw()+
labs(x="")
ggraph <- ggplot(gdata, aes(x=Dataset,y=Length, fill=Dataset)) +
geom_boxplot() +
theme_bw()+
labs(y="")
wgraph <- ggplot(wdata, aes(x=Dataset,y=Lengt, fill=Dataseth)) +
geom_boxplot() +
theme_bw()+
labs(x="",y="")
grid.arrange(cgraph, ggraph, wgraph, ncol=3)
cgraph <- ggplot(cdata, aes(x=Dataset,y=Length, fill=Dataset)) +
geom_boxplot() +
theme_bw()+
labs(x="")
ggraph <- ggplot(gdata, aes(x=Dataset,y=Length, fill=Dataset)) +
geom_boxplot() +
theme_bw()+
labs(y="")
wgraph <- ggplot(wdata, aes(x=Dataset,y=Length, fill=Dataset)) +
geom_boxplot() +
theme_bw()+
labs(x="",y="")
grid.arrange(cgraph, ggraph, wgraph, ncol=3)
cgraph <- ggplot(cdata, aes(x=Dataset,y=Length)) +
geom_boxplot(fill="red") +
theme_bw()+
labs(x="")
ggraph <- ggplot(gdata, aes(x=Dataset,y=Length)) +
geom_boxplot(fill="green") +
theme_bw()+
labs(y="")
wgraph <- ggplot(wdata, aes(x=Dataset,y=Length)) +
geom_boxplot(fill="yellow") +
theme_bw()+
labs(x="",y="")
grid.arrange(cgraph, ggraph, wgraph, ncol=3)
cgraph <- ggplot(cdata, aes(x=Dataset,y=Length)) +
geom_boxplot(fill="firebrick") +
theme_bw()+
labs(x="")
ggraph <- ggplot(gdata, aes(x=Dataset,y=Length)) +
geom_boxplot(fill="dodgerblue") +
theme_bw()+
labs(y="")
wgraph <- ggplot(wdata, aes(x=Dataset,y=Length)) +
geom_boxplot(fill="forestgreen") +
theme_bw()+
labs(x="",y="")
grid.arrange(cgraph, ggraph, wgraph, ncol=3)
cgraph <- ggplot(cdata, aes(x=Dataset,y=Length)) +
geom_boxplot(fill="firebrick1") +
theme_bw()+
labs(x="")
ggraph <- ggplot(gdata, aes(x=Dataset,y=Length)) +
geom_boxplot(fill="dodgerblue2") +
theme_bw()+
labs(y="")
wgraph <- ggplot(wdata, aes(x=Dataset,y=Length)) +
geom_boxplot(fill="darkseagreen") +
theme_bw()+
labs(x="",y="")
grid.arrange(cgraph, ggraph, wgraph, ncol=3)
cgraph <- ggplot(cdata, aes(x=Dataset,y=Length)) +
geom_boxplot() +
theme_bw()+
labs(x="")
ggraph <- ggplot(gdata, aes(x=Dataset,y=Length)) +
geom_boxplot() +
theme_bw()+
labs(y="")
wgraph <- ggplot(wdata, aes(x=Dataset,y=Length)) +
geom_boxplot() +
theme_bw()+
labs(x="",y="")
grid.arrange(cgraph, ggraph, wgraph, ncol=3)
cgraph <- ggplot(cdata, aes(x=Dataset,y=Length)) +
geom_boxplot() +
theme_bw()+
labs(x="")
ggraph <- ggplot(gdata, aes(x=Dataset,y=Length)) +
geom_boxplot() +
theme_bw()+
labs(x="", y="")
wgraph <- ggplot(wdata, aes(x=Dataset,y=Length)) +
geom_boxplot() +
theme_bw()+
labs(x="",y="")
grid.arrange(cgraph, ggraph, wgraph, ncol=3)
cgraph <- ggplot(cdata, aes(x=Dataset,y=Length)) +
geom_boxplot() +
theme_bw()+
labs(x="", y="Time Series Length")
ggraph <- ggplot(gdata, aes(x=Dataset,y=Length)) +
geom_boxplot() +
theme_bw()+
labs(x="", y="")
wgraph <- ggplot(wdata, aes(x=Dataset,y=Length)) +
geom_boxplot() +
theme_bw()+
labs(x="",y="")
grid.arrange(cgraph, ggraph, wgraph, ncol=3)
cgraph <- ggplot(cdata, aes(x=Dataset,y=Length)) +
geom_boxplot() +
theme_bw()+
labs(x="", y="Time Series Length") +
coord_flip()
ggraph <- ggplot(gdata, aes(x=Dataset,y=Length)) +
geom_boxplot() +
theme_bw()+
labs(x="", y="") +
coord_flip()
wgraph <- ggplot(wdata, aes(x=Dataset,y=Length)) +
geom_boxplot() +
theme_bw()+
labs(x="",y="") +
coord_flip()
grid.arrange(cgraph, ggraph, wgraph, ncol=1, nrow=3)
cgraph <- ggplot(cdata, aes(x=Dataset,y=Length)) +
geom_boxplot() +
theme_bw()+
labs(x="", y="") +
coord_flip()
ggraph <- ggplot(gdata, aes(x=Dataset,y=Length)) +
geom_boxplot() +
theme_bw()+
labs(x="", y="") +
coord_flip()
wgraph <- ggplot(wdata, aes(x=Dataset,y=Length)) +
geom_boxplot() +
theme_bw()+
labs(x="",y="Time Series Length") +
coord_flip()
grid.arrange(cgraph, ggraph, wgraph, ncol=1, nrow=3)
data <- read.csv("Cricket/AccuracyLengthEuclidean.csv")
data$Group = factor(data$TimeSeriesLength)
plotXYZ <- function(df, name, metric){
results <- lapply(c(1,2,3), function(x){
axis <- c("AccuracyX","AccuracyY","AccuracyZ")
data_name <- c(paste0(name,"X -"),paste0(name,"Y -"),paste0(name,"Z -"))
title_val <- paste0(data_name[x], " Classification Accuracy (",metric,") vs. Time Series Length")
return(
ggplot(df, aes_string(x="TimeSeriesLength", y=axis[x], group="Group")) +
geom_boxplot(width=15) +
#geom_point() +
#geom_smooth(method="loess") +
#scale_y_continuous(limits=c(0.5,0.67)) +
theme_bw() +
labs(
title=title_val,
x="Time Series Length",
y="Classification Accuracy"
)#, legend.title="")
)
})
return(results)
}
plots = plotXYZ(data, "Cricket","DTW")
grid.arrange(plots[[1]],plots[[2]],plots[[3]])
View(data)
data <- data[order(data$TimeSeriesLength),]
unique(data)
View(ldata)
unique(data$TimeSeriesLength)
wafer <- read.csv("Wafer/AccuracyLengthEuclidean.csv")
wafer$Group = factor(wafer$TimeSeriesLength)
ggplot(wafer, aes(x=TimeSeriesLength, y=Accuracy, group=Group)) +
geom_boxplot(width=10) +
theme_bw() +
#scale_y_continuous(limits=c(0.8,1)) +
labs(
title="Wafer Classification Accuracy (DTW) vs. Time Series Length",
x="Time Series Length",
y="Classification Accuracy"
)
wafer <- read.csv("Wafer/AccuracyLengthEuclidean.csv")
wafer <- wafer[as.numeric(wafer$TimeSeriesLength) > 3,]
wafer$Group = factor(wafer$TimeSeriesLength)
ggplot(wafer, aes(x=TimeSeriesLength, y=Accuracy, group=Group)) +
geom_boxplot(width=10) +
theme_bw() +
#scale_y_continuous(limits=c(0.8,1)) +
labs(
title="Wafer Classification Accuracy (DTW) vs. Time Series Length",
x="Time Series Length",
y="Classification Accuracy"
)
unique(wafer$TimeSeriesLength)
data <- read.csv("Cricket/AccuracyLengthDTW_MaxWindow.csv")
data$Group = factor(data$TimeSeriesLength)
plotXYZ <- function(df, name, metric){
results <- lapply(c(1,2,3), function(x){
axis <- c("AccuracyX","AccuracyY","AccuracyZ")
data_name <- c(paste0(name,"X -"),paste0(name,"Y -"),paste0(name,"Z -"))
title_val <- paste0(data_name[x], " Classification Accuracy (",metric,") vs. Time Series Length")
return(
ggplot(df, aes_string(x="TimeSeriesLength", y=axis[x], group="Group")) +
geom_boxplot(width=15) +
#geom_point() +
#geom_smooth(method="loess") +
#scale_y_continuous(limits=c(0.5,0.67)) +
theme_bw() +
labs(
title=title_val,
x="Time Series Length",
y="Classification Accuracy"
)#, legend.title="")
)
})
return(results)
}
plots = plotXYZ(data, "Cricket","DTW")
grid.arrange(plots[[1]],plots[[2]],plots[[3]])
unique(data$TimeSeriesLength)
dmax <- data[data$TimeSeriesLength == "100", ]
dmax
summary(dmax)
summary(data)
std(c(1,2,3,4))
stdev(c(1,2,3,4))
sqrt(var(c(1,2,3,4)))
sqrt(var(data$AccuracyX)
wafer <- read.csv("Wafer/AccuracyLengthEuclidean.csv")
sqrt(var(data$AccuracyX))
sqrt(var(data$AccuracyY))
sqrt(var(data$AccuracyZ))
(0.7756-0.6299)/0.08796059
data <- read.csv("Gestures/AccuracyLengthDTW_MaxWindow.csv")
data$Group = factor(data$TimeSeriesLength)
plotXYZ <- function(df, name, metric){
results <- lapply(c(1,2,3), function(x){
axis <- c("AccuracyX","AccuracyY","AccuracyZ")
data_name <- c(paste0(name,"X -"),paste0(name,"Y -"),paste0(name,"Z -"))
title_val <- paste0(data_name[x], " Classification Accuracy (",metric,") vs. Time Series Length")
return(
ggplot(df, aes_string(x="TimeSeriesLength", y=axis[x], group="Group")) +
geom_boxplot(width=15) +
#geom_point() +
#geom_smooth(method="loess") +
#scale_y_continuous(limits=c(0.5,0.67)) +
theme_bw() +
labs(
title=title_val,
x="Time Series Length",
y="Classification Accuracy"
)#, legend.title="")
)
})
return(results)
}
plots = plotXYZ(data, "Gestures","DTW")
grid.arrange(plots[[1]],plots[[2]],plots[[3]])
unique(data$TimeSeriesLength)
summary(data)
summary(data[data$TimeSeriesLength == "60",])
summary(data[data$TimeSeriesLength == "40",])
summary(data[data$TimeSeriesLength == "50",])
wafer <- read.csv("Wafer/AccuracyLengthDTW.csv")
wafer$Group = factor(wafer$TimeSeriesLength)
ggplot(wafer, aes(x=TimeSeriesLength, y=Accuracy, group=Group)) +
geom_boxplot(width=10) +
theme_bw() +
#scale_y_continuous(limits=c(0.8,1)) +
labs(
title="Wafer Classification Accuracy (DTW) vs. Time Series Length",
x="Time Series Length",
y="Classification Accuracy"
)
unique(wafer$TimeSeriesLength)
unique(sort(wafer$TimeSeriesLength))
summary(wafer[wafer$TimeSeriesLength == "325",])
summary(wafer)
sqrt(var(wafer$Accuracy))
data
sqrt(var(data$AccuracyX))
sqrt(var(data$AccuracyY))
sqrt(var(data$AccuracyZ))
data <- read.csv("Cricket/AccuracyLengthDTW_MaxWindow.csv")
sqrt(var(data$AccuracyX))
sqrt(var(data$AccuracyY))
sqrt(var(data$AccuracyZ))
data <- read.csv("Cricket/AccuracyLengthDTW_MaxWindow.csv")
(0.8353-0.7063)/0.09505661
(0.8061-0.6888)/0.09484667
data <- read.csv("Gestures/AccuracyLengthDTW_MaxWindow.csv")
sqrt(var(data$AccuracyX))
sqrt(var(data$AccuracyY))
sqrt(var(data$AccuracyZ))
(0.6459-0.5768)/0.06147466
(0.6498-0.5708)/0.06416432
(0.5975-0.5293)/0.05923888
wafer
summary(wafer)
sqrt(var(wafer$Accuracy))
(0.9214-0.9142)/0.009312961
data <- read.csv("Cricket/AccuracyLengthDTW_MaxWindow.csv")
unique(data$TimeSeriesLength)
data$Group = factor(data$TimeSeriesLength)
plotXYZ <- function(df, name, metric){
results <- lapply(c(1,2,3), function(x){
axis <- c("AccuracyX","AccuracyY","AccuracyZ")
data_name <- c(paste0(name,"X -"),paste0(name,"Y -"),paste0(name,"Z -"))
title_val <- paste0(data_name[x], " Classification Accuracy (",metric,") vs. Time Series Length")
return(
ggplot(df, aes_string(x="TimeSeriesLength", y=axis[x], group="Group")) +
geom_boxplot(width=15) +
#geom_point() +
#geom_smooth(method="loess") +
#scale_y_continuous(limits=c(0.5,0.67)) +
theme_bw() +
labs(
title=title_val,
x="Time Series Length",
y="Classification Accuracy"
)#, legend.title="")
)
})
return(results)
}
plots = plotXYZ(data, "Cricket","DTW")
grid.arrange(plots[[1]],plots[[2]],plots[[3]])
